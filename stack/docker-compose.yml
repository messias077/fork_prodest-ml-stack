version: '3.8'

x-stack-common:
  &stack-common-env
  TZ : America/Sao_Paulo
  no_proxy : "localhost, 127.0.0.1, 10.0.0.0/8, 172.16.0.0/12, database, api, queue, worker-pub, worker-retrain, model-registry, storage, mltraining-model"

# Variáveis comuns aos Workers e Model Registry
x-common-variables:
  &common-variables
  STACK_LOG_OUTPUT: file  # Local para geração de logs. Opções: file ou console
  MLFLOW_S3_ENDPOINT_URL : http://storage:9000/
  MLFLOW_TRACKING_URI : http://model-registry:5000/
  MLFLOW_TRACKING_USERNAME : ${MLFLOW_TRACKING_USERNAME}
  MLFLOW_TRACKING_PASSWORD : ${MLFLOW_TRACKING_PASSWORD}
  AWS_ACCESS_KEY_ID : ${AWS_ACCESS_KEY_ID}
  AWS_SECRET_ACCESS_KEY : ${AWS_SECRET_ACCESS_KEY}


services:

  database:
    # https://hub.docker.com/_/mongo
    image: mongo:7.0.1-rc0
    environment:
      <<: *stack-common-env
      MONGO_INITDB_ROOT_USERNAME : ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD : ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - ../database/mongodb_data:/data/db
    ports:
      - "27017:27017"
    deploy:
        resources:
            limits:
              cpus: "0.5"
              memory: 550M
        restart_policy:
            condition: on-failure
            delay: 30s
            max_attempts: 5
            window: 60s

  queue:
    # https://hub.docker.com/_/rabbitmq
    image: rabbitmq:3-management
    environment:
      <<: *stack-common-env
      RABBITMQ_DEFAULT_USER : ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS : ${RABBITMQ_DEFAULT_PASS}
    ports:
      - "15672:15672"
      - "5672:5672"
    deploy:
        resources:
            limits:
              cpus: "0.3"
              memory: 250M
        restart_policy:
            condition: on-failure
            delay: 30s
            max_attempts: 5
            window: 60s

  storage:
    # https://hub.docker.com/r/minio/minio
    image: minio/minio:RELEASE.2023-09-23T03-47-50Z
    volumes:
      - ../storage/minio_data:/data
    environment:
      <<: *stack-common-env
      MINIO_ROOT_USER : ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD : ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address :9001
    ports:
      - "9000:9000"
      - "9001:9001"
    deploy:
        resources:
            limits:
              cpus: "0.2"
              memory: 180M
        restart_policy:
            condition: on-failure
            delay: 30s
            max_attempts: 5
            window: 60s

  api:
    image: python-api
    environment:
      <<: *stack-common-env
      RABBITMQ_SERVER : queue
      RABBITMQ_PORT : "5672"
      DB_SERVER_NAME : database
      ADVWORKID_CREDENTIAL : ${ADVWORKID_CREDENTIAL}
      API_TOKEN : ${API_TOKEN}
      API_TOKEN_WORKERS : ${API_TOKEN_WORKERS}
      RABBITMQ_DEFAULT_USER : ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS : ${RABBITMQ_DEFAULT_PASS}
      MONGO_INITDB_ROOT_USERNAME : ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD : ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - "8080:8000"
    deploy:
        resources:
            limits:
              cpus: "0.6"
              memory: 200M
        restart_policy:
            condition: on-failure
            delay: 30s
            max_attempts: 10
            window: 60s
    depends_on:
        - database
        - queue

  model-registry:
    image: python-mlflow
    environment:
      <<: [*stack-common-env, *common-variables]
      # Nome do bucket padrão onde o MLflow irá salvar os artefatos dos experimentos. Caso deseje alterar,
      # troque mlflow pelo nome do bucket que desejar
      DEFAULT_ARTIFACT_ROOT : s3://mlflow
    volumes:
      - ../model_registry/mlflow_data:/mlflow_data
    ports:
      - "5000:5000"
    deploy:
        resources:
            limits:
              cpus: "1.8"
              memory: 800M
        restart_policy:
            condition: on-failure
            delay: 30s
            max_attempts: 5
            window: 60s
    depends_on:
        - storage

  worker-pub:
    image: python-worker
    environment:
      <<: [*stack-common-env, *common-variables]
      API_URL : http://api:8000
      RABBITMQ_SERVER : queue
      RABBITMQ_PORT : "5672"
      RABBITMQ_DEFAULT_USER : ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS : ${RABBITMQ_DEFAULT_PASS}
      ADVWORKID_CREDENTIAL : ${ADVWORKID_CREDENTIAL}
      WORKER_ID_001 : ${WORKER_ID_001}
    deploy:
        resources:
            limits:
              cpus: "0.6"
              memory: 600M
        restart_policy:
            condition: on-failure
            delay: 45s
            max_attempts: 10
            window: 60s
    depends_on:
        - model-registry
        - api

  worker-retrain:
    # A propriedade 'deploy' não foi configurada porque depende de cada modelo em específico.
    # Este serviço só será executado no treino do modelo
    image: python-retrain
    environment:
      <<: [*stack-common-env, *common-variables]
    command: sleep infinity
    depends_on:
        - model-registry

  mltraining-model:
    # A propriedade 'deploy' não foi configurada porque depende de cada modelo em específico.
    # Este serviço só será executado no retreino do modelo
    image: python-training-model
    environment:
      <<: [*stack-common-env, *common-variables]
    command: sleep infinity
    depends_on:
        - model-registry
